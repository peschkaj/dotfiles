# -*- shell-script -*-
setopt promptsubst

### Command line

# Allow a very fast way (just typing ".") to reload the shell
# configuration. Based on [1].
#
# [1]: https://unix.stackexchange.com/a/326948/176805
function _accept-line {
    emulate -LR zsh
    if [[ $BUFFER == "." ]]; then
        BUFFER="exec zsh"
    fi
    zle .accept-line
}
zle -N accept-line _accept-line

# Allow comments even in the interactive shell (start with #).
setopt interactive_comments

# Allow escaping a single quote within a singly-quoted string by
# prefixing it with an additional single quote: echo 'It''s me!'
setopt rc_quotes

# Turn off flow control (which makes it so that ctrl+s and ctrl+q
# freeze and unfreeze command output, respectively).
unsetopt flow_control

# Make bracketed paste slightly smarter. This causes url-quote-magic
# below to work correctly.
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

# Automatically escape URLs.
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

#### Completion

# For ambiguous completions, use an interactive menu (which can be
# escaped with C-g) instead of overwriting the current command.
zstyle ':completion:*' menu select

# Allow usage of shift-tab (backtab) to go backward in the completion
# menu.
bindkey '^[[Z' reverse-menu-complete

# Substring completions. Not fuzzy. Sometimes they have weird
# behavior. This is the best I can manage for now, since I've been
# working on completions literally all day. See [1]. (Why is zsh so
# hard? Sigh.)
#
# [1]: http://unix.stackexchange.com/q/330481/176805
zstyle ':completion:*' matcher-list 'l:|=* r:|=* m:{a-z\-}={A-Z\_}'

#### Globbing

# This makes globs case-insensitive.
unsetopt case_glob

# This makes globbing regexes case-insensitive.
unsetopt case_match

# Allow globs to match dotfiles.
setopt glob_dots

# Sort numeric filenames numerically, instead of lexicographically.
setopt numeric_glob_sort

# Disable history expansion, so we can use ! in our commands.
setopt no_bang_hist


#### Command history

# Never discard history within a session, or at least not before any
# reasonable amount of time.
HISTSIZE=1000000

# Save history to disk. The value of this option is the default
# installed by zsh-newuser-install.
HISTFILE=~/.zsh_history

# Never discard history in the file on disk, either.
SAVEHIST=1000000

# Don't save commands to the history if they start with a leading
# space. This is useful if you have to pass a password as a parameter
# to a command.
setopt hist_ignore_space

# All zsh sessions share the same history file. Timestamps are also
# recorded for each command.
setopt share_history

# Use OS-provided locking mechanisms for the history file, if
# available. The manual says this might improve performance and
# decrease the chance of corruption.
setopt hist_fcntl_lock

# Remove superfluous whitespace when saving commands to the history.
setopt hist_reduce_blanks

# When history expansion is used (e.g. sudo !!), do the expansion
# instead of executing the command immediately. This currently has no
# effect since history expansion is disabled.
setopt hist_verify

# Remove extendedglob support. By removing support for extended globs, we can
# actually run clang using `clang -###` to see the underlying commands that the
# clang driver script is using.
unsetopt extendedglob

### Help system

# By default, run-help is an alias to man. We want to turn that off so
# that we can access the function definition of run-help (by default,
# aliases take precedence over functions). But if you re-source this
# file, then the alias might already be removed, so we suppress any
# error that this might throw.
unalias run-help 2>/dev/null || true

# Now we autoload run-help and several extensions to it which provide
# more precise help for certain external commands.
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-ip
autoload -Uz run-help-openssl
autoload -Uz run-help-p4
autoload -Uz run-help-sudo
#autoload -Uz run-help-svk
#autoload -Uz run-help-svn

zle -N helpmap
bindkey '^h' run-help

## Aliases
### Filesystem navigation
#### cd

alias -- -='cd -'
alias -- -1='cd -1'
alias -- -2='cd -2'
alias -- -3='cd -3'
alias -- -4='cd -4'
alias -- -5='cd -5'
alias -- -6='cd -6'
alias -- -7='cd -7'
alias -- -8='cd -8'
alias -- -9='cd -9'

#### dirs

# This alias is a convenient way to list the last few directories
# visited, with their numbers. You can then use the 'cd -n' aliases to
# jump to those directories.
alias ds='dirs -v | head -10'

### Help system

alias help=run-help

### Utilities
#### Emacs

if (( $+commands[emacs] )); then
    alias e='emacs -nw'
    alias eq='emacs -nw -Q'
    alias ew='emacs'
    alias eqw='emacs -Q'
fi

if (( $+commands[emacsclient] )); then
    alias ec='emacsclient --alternate-editor= --no-wait'
    alias ecw='emacsclient --alternate-editor='
fi

#### Git

if (( $+commands[git] )); then
    alias g=git

    alias gh='git help'

    alias gi='git init'

    alias gst='git status'

    alias gsh='git show'
    alias gshs='git show --stat'

    for all in "" a; do
        local all_flags=
        if [[ -n $all ]]; then
            all_flags=" --all"
        fi
        for oneline in "" o; do
            local oneline_flags=
            if [[ -n $oneline ]]; then
                oneline_flags=" --oneline"
            fi
            for diff in "" s p ps sp; do
                local diff_flags=
                case $diff in
                    s) diff_flags=" --stat";;
                    p) diff_flags=" --patch";;
                    ps|sp) diff_flags=" --patch --stat";;
                esac
                for search in "" g G S; do
                    local search_flags=
                    case $search in
                        g) search_flags=" --grep";;
                        G) search_flags=" -G";;
                        S) search_flags=" -S";;
                    esac
                    alias="gl${all}${oneline}${diff}${search}="
                    alias+="git log --graph --decorate${all_flags}"
                    alias+="${oneline_flags}${diff_flags}${search_flags}"
                    alias $alias
                done
            done
        done
    done

    alias ga='git add'
    alias gap='git add --patch'
    alias gaa='git add --all'

    alias grm='git rm'

    alias gmv='git mv'

    alias gr='git reset'
    alias grs='git reset --soft'
    alias grh='git reset --hard'
    alias grp='git reset --patch'

    alias gc='git commit --verbose'
    alias gca='git commit --verbose --amend'
    alias gcaa='git commit --verbose --amend --all'
    alias gcf='git commit -C HEAD --amend'
    alias gcfa='git commit -C HEAD --amend --all'
    alias gce='git commit --verbose --allow-empty'
    alias gcm='git commit -m'
    alias gcma='git commit --all -m'
    alias gcam='git commit --amend -m'
    alias gcama='git commit --amend --all -m'
    alias gcem='git commit --allow-empty -m'

    alias gcp='git cherry-pick'
    alias gcpc='git cherry-pick --continue'
    alias gcpa='git cherry-pick --abort'

    alias grv='git revert'
    alias grvm='git revert -m'

    alias gt='git tag'
    alias gtd='git tag -d'

    alias gn='git notes'
    alias gna='git notes add'
    alias gne='git notes edit'
    alias gnr='git notes remove'

    alias gsta='git stash save'
    alias gstau='git stash save --include-untracked'
    alias gstap='git stash save --patch'
    alias gstl='git stash list'
    alias gsts='git stash show --text'
    alias gstss='git stash show --stat'
    alias gstaa='git stash apply'
    alias gstp='git stash pop'
    alias gstd='git stash drop'

    alias gd='git diff'
    alias gds='git diff --stat'
    alias gdc='git diff --cached'
    alias gdcs='git diff --cached --stat'

    alias gbl='git blame'

    alias gb='git branch'
    alias gbsu='git branch --set-upstream-to'
    alias gbusu='git branch --unset-upstream'
    alias gbd='git branch --delete'
    alias gbdd='git branch --delete --force'

    alias gco='git checkout'
    alias gcop='git checkout --patch'
    alias gcob='git checkout -B'

    alias glsf='git ls-files'

    alias gx='git clean'
    alias gxf='git clean -fd'

    alias gbs='git bisect'
    alias gbss='git bisect start'
    alias gbsg='git bisect good'
    alias gbsb='git bisect bad'
    alias gbsr='git bisect reset'

    alias gm='git merge'
    alias gma='git merge --abort'

    alias grb='git rebase'
    alias grbi='git rebase --interactive'
    alias grbc='git rebase --continue'
    alias grbs='git rebase --skip'
    alias grba='git rebase --abort'

    alias gsm='git submodule'
    alias gsma='git submodule add'
    alias gsms='git submodule status'
    alias gsmi='git submodule init'
    alias gsmd='git submodule deinit'
    alias gsmu='git submodule update'
    alias gsmui='git submodule update --init --recursive'
    alias gsmf='git submodule foreach'
    alias gsmy='git submodule sync'

    alias gcl='git clone --recursive'

    alias gre='git remote'
    alias grel='git remote list'
    alias gres='git remote show'

    alias gf='git fetch --prune'
    alias gfa='git fetch --all --prune'

    alias gu='git pull'
    alias gur='git pull --rebase'
    alias gum='git pull --no-rebase'

    alias gp='git push'
    alias gpa='git push --all'
    alias gpf='git push --force-with-lease'
    alias gpff='git push --force'
    alias gpu='git push --set-upstream'
    alias gpd='git push --delete'
fi

#### Hub

if (( $+commands[hub] )); then
    alias hcl='hub clone --recursive'
    alias hc='hub create --copy'
    alias hcp='hub create -p --copy'
    alias hf='hub fork'
    alias hp='hub pull-request --copy'
    alias hb='hub browse'
    alias hh='hub help'
    alias hi='hub issue'
fi

#### Tmux

if (( $+commands[tmux] )); then
    alias ta='tmux attach'
    alias ts='tmux new-session -s'
    alias tl='tmux list-sessions'
fi

### man

# We define a function that wraps man to provide some basic
# highlighting for man pages. This makes them a little easier on the
# eyes. (This is done by binding some environment variables that less
# looks at.) See [1].
#
# [1]: https://github.com/robbyrussell/oh-my-zsh/blob/3ebbb40b31fa1ce9f10040742cdb06ea04fa7c41/plugins/colored-man-pages/colored-man-pages.plugin.zsh
function man {
    env \
  LESS_TERMCAP_mb=$(printf "\e[1;31m") \
  LESS_TERMCAP_md=$(printf "\e[1;31m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  man $@
}


alias ls="ls --color"
alias findgrep='find . -type f -print0 | xargs -0 grep -I -H -n --color=always'


# SSH aliases
alias pdxada='ssh -i ~/.ssh/id_rsa jpeschka@ada.cs.pdx.edu -t $@ "tmux attach || tmux new"'
alias pdxlinux='ssh -i ~/.ssh/id_rsa jpeschka@linux.cs.pdx.edu -t $@ "tmux attach || tmux new"'
alias pdxlinuxlab='ssh -i ~/.ssh/id_rsa jpeschka@linuxlab.cs.pdx.edu  -t $@ "tmux attach || tmux new"'
alias babbage='ssh -i ~/.ssh/id_rsa jpeschka@babbage.cs.pdx.edu -t $@ "tmux attach || tmux new"'
alias pdx333grader='ssh -i ~/.ssh/id_rsa cs333_1@king.cs.pdx.edu'
alias pdxprint='ssh jpeschka@linux.cs.pdx.edu lpr -P fab12003bw1 -o sides=two-sided-long-edge <'

alias ubuntu='ssh ubuntu -t $@ "tmux attach || tmux new"'
alias hm='ssh -i ~/.ssh/id_rsa jeremiah@heavy-messing'


#export CFLAGS="-march=native"
export RUSTFLAGS="-C target-cpu=native"

export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -c"
export VISUAL="emacsclient -c -n -a emacs"

### Replace ec config
# Rust configuration
export CARGO_HOME=$HOME/.cargo
export PATH=$HOME/.local/bin:$PATH:$CARGO_HOME/bin

# Move the "what did you mean" over to thefuck
unsetopt correct
unsetopt correctall

# the main ZSH rc sets up scp as 'noglob scp' which is breaking uploading an entire folder
unalias scp

# Necessary, going forward, to make sure that SSH via TRAMP will work
[ $TERM = "dumb" ] && unsetopt zle && PS1='$ '

# cabal
#export PATH=$HOME/.cabal/bin:$PATH

# ghcup
#. "$HOME/.ghcup/env"



alias open=xdg-open


function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

alias d="kitty +kitten diff"

autoload -Uz compinit
compinit
# Completion for kitty
kitty + complete setup zsh | source /dev/stdin

# opam configuration
test -r /home/jeremiah/.opam/opam-init/init.zsh && . /home/jeremiah/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# Better shell
source ~/powerlevel10k/powerlevel10k.zsh-theme
source $HOME/.purepower

# Don't forget to use rgwrapper to pdftotext the pdfs
alias rg="rg --pre=rgwrapper"

### Fstar and Kremlin setup
export FSTAR_HOME=$HOME/src/fstarlang/FStar/
export KREMLIN_HOME=$HOME/src/fstarlang/kremlin
export PATH=$PATH:$FSTAR_HOME/bin:$KREMLIN_HOME

### seL4 container build
alias container='make -C /home/jeremiah/src/seL4/seL4-CAmkES-L4v-dockerfiles user HOST_DIR=$(pwd)'

### Search with whatever is on the line when pressing up or down
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
## ${terminfo[STUFF]} is more likely to work than hardcoded keycodes like ^[[A
## see https://unix.stackexchange.com/a/405358/74452 for additional information
## or look at /etc/zsh/zshrc
bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search # Up
bindkey "${terminfo[kcud1]}" down-line-or-beginning-search # Down

unsetopt AUTO_NAME_DIRS

## Add calculator plugin https://github.com/arzzen/calc.plugin.zsh
## Can be activated using something like `= 2 * 2`
## See the README for more details
zplg load arzzen/calc.plugin.zsh

## NVM config
export NVM_DIR="$HOME/.config"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
